---
- name: Deploy Local Registry
  hosts: localhost
  vars:
    password: "dummy"
    user: "dummy"

  tasks:
  - name: Install httpd
    yum:
      name: "{{ item }}"
      state: latest
    become: yes
    loop:
      - httpd
      - podman
      - httpd-tools

  - name: Create myregistry directory and sub-directories
    file:
      path: "{{ item }}"
      state: directory
    loop:
      - /tmp/myregistry
      - /tmp/myregistry/auth
      - /tmp/myregistry/certs
      - /tmp/myregistry/data

  - name: Add myregistry to /etc/hosts
    lineinfile:
      path: /etc/hosts
      line: '127.0.0.1 myregistry'
      insertbefore: BOF
    become: yes

  - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
    community.crypto.openssl_privatekey:
      path: /tmp/myregistry/certs/myregistry_key.pem

  - name: Generate an OpenSSL Certificate Signing Request
    community.crypto.openssl_csr:
      path: /tmp/myregistry/certs/myregistry.csr
      privatekey_path: /tmp/myregistry/certs/myregistry_key.pem
      common_name: myregistry

  - name: Generate a Self Signed OpenSSL certificate for myregistry
    openssl_certificate:
      path: /tmp/myregistry/certs/myregistry_crt.crt
      privatekey_path: /tmp/myregistry/certs/myregistry_key.pem
      csr_path: /tmp/myregistry/certs/myregistry.csr
      provider: selfsigned

  - name: Copy registry crt file to anchors
    copy:
      src: /tmp/myregistry/certs/myregistry_crt.crt
      dest: /etc/pki/ca-trust/source/anchors/

  - name: update-ca-trust
    command: update-ca-trust extract
  
  - name: Generate htpasswd file to authenticate later to the registry
    command: htpasswd -bBc /tmp/myregistry/auth/htpasswd {{user}} {{password}}

  - name: Gather service firewalld state
    systemd:
      name: firewalld
      state: started
    register: firewalld_status

  - name: Add port 5000/tcp to firewalld
    firewalld:
      port: "{{ item }}"
      permanent: yes
      state: enabled
      immediate: true
    loop:
      - 5000/tcp
    when: firewalld_status.state == "started"

  - name: Add http service to firewalld
    firewalld:
      service: "{{ item }}"
      permanent: yes
      state: enabled
      immediate: true
    loop:
      - http
    when: firewalld_status.state == "started"

  - name: Create a registry container
    containers.podman.podman_container:
      name: myregistry
      image: docker.io/library/registry:2
      state: started
      ports:
        - 5000:5000
      volume:
        - /tmp/myregistry/data:/var/lib/registry:z
        - /tmp/myregistry/auth:/auth:z
        - /tmp/myregistry/certs:/certs:z
      env:
          REGISTRY_AUTH: "htpasswd"
          REGISTRY_AUTH_HTPASSWD_REALM: "Registry"
          REGISTRY_HTTP_SECRET: "ALongRandomSecretForRegistry"
          REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
          REGISTRY_HTTP_TLS_CERTIFICATE: /certs/myregistry_crt.crt
          REGISTRY_HTTP_TLS_KEY: /certs/myregistry_key.pem

  - name: generate auth data for pull-secret.json file
    shell: echo -n "{{user}}:{{password}}" | base64 -w0
    register: output

  - name: "Creating a pull-secret.json file with content for all registries"
    copy:
     dest: "/tmp/pull-secret.json"
     content: |
       {
         "auths": {
           "myregistry:5000": {
             "auth": '{{output.stdout}}',
             "username": "{{user}}",
             "password": "{{password}}"
           },
         "https://quay.io": {
             "auth": 'dGFtYmVyK3F1YXlfcHVsbF9yb2JvdDpOVzRBTTNBS1A3OEMzSTdHNVJQWklZUUhNVlZJOU5EWFdUUkNVVUxYRlJCS1BXVVJQRUZPNkZCNU5HMEg0T0FU',
             "email": ""
           },
         "https://registry.redhat.io": {
             "auth": 'MTI4NTA5MDR8cHVsbC1yb2JvdDpleUpoYkdjaU9pSlNVelV4TWlKOS5leUp6ZFdJaU9pSXdNV0prTlRCbU1XTTBNVEEwTnpBNFlUaGlZMlF6WXprMllqWmhNak0yT1NKOS5nMHVuMk1xazhxUDBERWVzUEdfVTNvdzBzVGJtOEx4VFlmbUtINkt1TTBmYUFNX0hWWVNwdVMwTGswSjlPM2xqSlNEdHE4NnJScnlMZUR3elMwUEJsLUpPM2lwc05uOGxoNDFGd3lXUkRoc2luNmFTZ2NZc3gwVkFrQkV4T05meFpsNExJbkYzdF96cXRCWUdmVUpDMHRYaFdYd3ZabGZPNUU2bVY5V0tvX0VwV1QyeldReWRSS1hISllzV1A0Q1lnT3dseTF5VEZ3WHRKQ3lNUDNwTGRmcGNLRzRubXVRTlJjNmtIeE94NURiX3REUjh4S0hxT3ZrZnU4YUstQVh6RW1zZ0R6M2VISFJGd0dUVFYxSUtPd0d3aWYwMUpCM0kzakpTYThBVlBqT1MzM0cxdU81ZVVVWnFRdGdjX1RTQ05pVXhMdmNPV0tLVUZMaVdmVHZJdEZhY1g2UzluSV94X2FMZTBnSVdmVkpMUFJHZGVuY2pfX3Q3VXlnVDFKTGRzSWJXQ21yOVY4T2x4amROdkRKeGRlLU0zNlVhS3k4Q25udnpnNWx0cXozMnI0bGZ4X3NWOF9WOWg1ZVZza0xlLVRKS3ZWTlNkd0IyYUpkR29yaDhUTjRGY3RleW9FYk5YbEVzaTRkbXYwWG1rWktQRlpvOEVabHRUdzBMRXB1U3NUNG4yTXlTQVlObDRXXzRlWE9hV190cUQ1XzNmWF9LendoeV9SSFhERjNia3FJUExBRUw0SzJ0TkVKSnpIYVZuY2NSYzY5X2NoNzdoVjctZk5FbHBFaEtSTDNUb28wNWh1T0VGMnlFRlRFTDVQNDQ4SmdxeUVaMjNzTHNuVEFUd1VSUGlYM3pEWTRqMElpMktCeXV0YmN4SENOeEx1VVZWUUMtRDZzU0VlOA',
            "username": '12850904|pull-robot',
            "password": 'eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiIwMWJkNTBmMWM0MTA0NzA4YThiY2QzYzk2YjZhMjM2OSJ9.g0un2Mqk8qP0DEesPG_U3ow0sTbm8LxTYfmKH6KuM0faAM_HVYSpuS0Lk0J9O3ljJSDtq86rRryLeDwzS0PBl-JO3ipsNn8lh41FwyWRDhsin6aSgcYsx0VAkBExONfxZl4LInF3t_zqtBYGfUJC0tXhWXwvZlfO5E6mV9WKo_EpWT2zWQydRKXHJYsWP4CYgOwly1yTFwXtJCyMP3pLdfpcKG4nmuQNRc6kHxOx5Db_tDR8xKHqOvkfu8aK-AXzEmsgDz3eHHRFwGTTV1IKOwGwif01JB3I3jJSa8AVPjOS33G1uO5eUUZqQtgc_TSCNiUxLvcOWKKUFLiWfTvItFacX6S9nI_x_aLe0gIWfVJLPRGdencj__t7UygT1JLdsIbWCmr9V8OlxjdNvDJxde-M36UaKy8Cnnvzg5ltqz32r4lfx_sV8_V9h5eVskLe-TJKvVNSdwB2aJdGorh8TN4FcteyoEbNXlEsi4dmv0XmkZKPFZo8EZltTw0LEpuSsT4n2MySAYNl4W_4eXOaW_tqD5_3fX_Kzwhy_RHXDF3bkqIPLAEL4K2tNEJJzHaVnccRc69_ch77hV7-fNElpEhKRL3Too05huOEF2yEFTEL5P448JgqyEZ23sLsnTATwURPiX3zDY4j0Ii2KByutbcxHCNxLuUVVQC-D6sSEe8'
           },
         "https://registry.connect.redhat.com": {
           "auth": 'MTI4NTA5MDR8cHVsbC1yb2JvdDpleUpoYkdjaU9pSlNVelV4TWlKOS5leUp6ZFdJaU9pSXdNV0prTlRCbU1XTTBNVEEwTnpBNFlUaGlZMlF6WXprMllqWmhNak0yT1NKOS5nMHVuMk1xazhxUDBERWVzUEdfVTNvdzBzVGJtOEx4VFlmbUtINkt1TTBmYUFNX0hWWVNwdVMwTGswSjlPM2xqSlNEdHE4NnJScnlMZUR3elMwUEJsLUpPM2lwc05uOGxoNDFGd3lXUkRoc2luNmFTZ2NZc3gwVkFrQkV4T05meFpsNExJbkYzdF96cXRCWUdmVUpDMHRYaFdYd3ZabGZPNUU2bVY5V0tvX0VwV1QyeldReWRSS1hISllzV1A0Q1lnT3dseTF5VEZ3WHRKQ3lNUDNwTGRmcGNLRzRubXVRTlJjNmtIeE94NURiX3REUjh4S0hxT3ZrZnU4YUstQVh6RW1zZ0R6M2VISFJGd0dUVFYxSUtPd0d3aWYwMUpCM0kzakpTYThBVlBqT1MzM0cxdU81ZVVVWnFRdGdjX1RTQ05pVXhMdmNPV0tLVUZMaVdmVHZJdEZhY1g2UzluSV94X2FMZTBnSVdmVkpMUFJHZGVuY2pfX3Q3VXlnVDFKTGRzSWJXQ21yOVY4T2x4amROdkRKeGRlLU0zNlVhS3k4Q25udnpnNWx0cXozMnI0bGZ4X3NWOF9WOWg1ZVZza0xlLVRKS3ZWTlNkd0IyYUpkR29yaDhUTjRGY3RleW9FYk5YbEVzaTRkbXYwWG1rWktQRlpvOEVabHRUdzBMRXB1U3NUNG4yTXlTQVlObDRXXzRlWE9hV190cUQ1XzNmWF9LendoeV9SSFhERjNia3FJUExBRUw0SzJ0TkVKSnpIYVZuY2NSYzY5X2NoNzdoVjctZk5FbHBFaEtSTDNUb28wNWh1T0VGMnlFRlRFTDVQNDQ4SmdxeUVaMjNzTHNuVEFUd1VSUGlYM3pEWTRqMElpMktCeXV0YmN4SENOeEx1VVZWUUMtRDZzU0VlOA',
            "username": '12850904|pull-robot',
            "password": 'eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiIwMWJkNTBmMWM0MTA0NzA4YThiY2QzYzk2YjZhMjM2OSJ9.g0un2Mqk8qP0DEesPG_U3ow0sTbm8LxTYfmKH6KuM0faAM_HVYSpuS0Lk0J9O3ljJSDtq86rRryLeDwzS0PBl-JO3ipsNn8lh41FwyWRDhsin6aSgcYsx0VAkBExONfxZl4LInF3t_zqtBYGfUJC0tXhWXwvZlfO5E6mV9WKo_EpWT2zWQydRKXHJYsWP4CYgOwly1yTFwXtJCyMP3pLdfpcKG4nmuQNRc6kHxOx5Db_tDR8xKHqOvkfu8aK-AXzEmsgDz3eHHRFwGTTV1IKOwGwif01JB3I3jJSa8AVPjOS33G1uO5eUUZqQtgc_TSCNiUxLvcOWKKUFLiWfTvItFacX6S9nI_x_aLe0gIWfVJLPRGdencj__t7UygT1JLdsIbWCmr9V8OlxjdNvDJxde-M36UaKy8Cnnvzg5ltqz32r4lfx_sV8_V9h5eVskLe-TJKvVNSdwB2aJdGorh8TN4FcteyoEbNXlEsi4dmv0XmkZKPFZo8EZltTw0LEpuSsT4n2MySAYNl4W_4eXOaW_tqD5_3fX_Kzwhy_RHXDF3bkqIPLAEL4K2tNEJJzHaVnccRc69_ch77hV7-fNElpEhKRL3Too05huOEF2yEFTEL5P448JgqyEZ23sLsnTATwURPiX3zDY4j0Ii2KByutbcxHCNxLuUVVQC-D6sSEe8'
         }
         }
       }

  - name: "mkdir for root auth.json (based on an official solution https://access.redhat.com/solutions/5312991)"
    file:
      path: /run/containers/0
      state: directory

  - name: Copying the new pull-secret.json file to /run/user/0/containers/auth.json file
    copy:
      src: /tmp/pull-secret.json
      dest: /run/containers/0/auth.json

  - name: "logging in to myregistry:5000 with podman"
    command: sudo podman login --authfile /run/containers/0/auth.json https://myregistry:5000 --tls-verify=false
    register: login_myregistry_output

  - debug: 
      msg: "{{login_myregistry_output.stdout}}"

  - name: "logging in to quay.io with podman + robot account"
    command: sudo podman login --authfile /run/containers/0/auth.json quay.io
    register: login_quay_output

  - debug:
      msg: "{{login_quay_output.stdout}}"

  - name: "logging in to registry.redhat.io with podman + Registry Service Account"
    command: sudo podman login --authfile /run/containers/0/auth.json registry.redhat.io
    register: login_redhat_registry_output

  - debug:
      msg: "{{login_redhat_registry_output.stdout}}"


- name: Preperations for index image
  hosts: localhost
  vars:
    ocp_version: "4.6.8"
    opm_version: "v1.18.0"
    grpcurl_latest_version_number: "v1.8.2"

  tasks:
  
  - name: "install skopeo"
    yum:
      name: podman
      state: latest
    become: yes

  - name: "check if opm already installed"
    stat:
      path: /usr/local/bin/opm
    register: result_opm

  - name: "check if grpcurl already installed"
    stat:
      path: /usr/local/bin/grpcurl
    register: result_grpcurl

  - name: "check if openshift client (oc)  already installed"
    stat:
      path: /usr/local/bin/oc
    register: result_oc
  
  - name: "installing grpcurl {{ grpcurl_latest_version_number }}"
    unarchive:
      remote_src: yes
      src: "https://github.com/fullstorydev/grpcurl/releases/download/{{grpcurl_latest_version_number}}/grpcurl_{{grpcurl_latest_version_number | replace('v','')}}_linux_x86_64.tar.gz"
      dest: /usr/local/bin
    when: result_grpcurl.stat.exists == false
    register: test

  - debug:
      msg: "{{test}}"

  - name: "installing opm {{opm_version}}"
    get_url:
      url: "https://github.com/operator-framework/operator-registry/releases/download/{{opm_version}}/linux-amd64-opm"
      dest: "/usr/local/bin/opm"
    when: result_opm.stat.exists == false

  - name: "installing openshift client (oc) {{ocp_version}}"
    unarchive:
      remote_src: yes
      src: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ocp_version}}/openshift-client-linux-{{ocp_version}}.tar.gz"
      dest: "/usr/local/bin"
    when: result_oc.stat.exists == false


- name: Create the index image and manifests file containing all the required images
  hosts: localhost
  vars:
    index_image_version: v4.6
    required_operator: starburst

  tasks:
  
  ###### Choose one : Red Hat Index Image or Certified Index Image #######
  ###### based on the following two articles: https://docs.openshift.com/container-platform/4.6/operators/understanding/olm-rh-catalogs.html + https://docs.openshift.com/container-platform/4.6/operators/admin/olm-restricted-networks.html#olm-restricted-networks

  # - name: Pull the Red Hat index image
  #   containers.podman.podman_image:
  #     name: registry.redhat.io/redhat/redhat-operator-index:{{index_image_version}}
  #     auth_file: /tmp/pull-secret.json

  # - name: Run the index image
  #   containers.podman.podman_container:
  #     name: redhat-operators-index-image
  #     image: registry.redhat.io/redhat/redhat-operator-index:{{index_image_version}}
  #     state: started
  #     ports:
  #       - 50051:50051
  


  - name: Pull the Marketplace index image
    containers.podman.podman_image:
      name: registry.redhat.io/redhat/certified-operator-index:{{index_image_version}}
      auth_file: /tmp/pull-secret.json

  - name: Run the index image
    containers.podman.podman_container:
      name: certified-operators-index-image
      image: registry.redhat.io/redhat/certified-operator-index:{{index_image_version}}
      state: started
      ports:
        - 50051:50051

  # - name: Run the index image
  #   containers.podman.podman_container:
  #     name: redhat-operators-index-image
  #     image: registry.redhat.io/redhat/redhat-operator-index:{{index_image_version}}
  #     state: started
  #     ports:
  #       - 50051:50051

  - name: Run grpcurl to get the list of packages (Operators) available
    shell: grpcurl -plaintext localhost:50051 api.Registry/ListPackages > /tmp/operators-packages.out

  - name: filtering for desired operators from the index list
    shell: cat /tmp/operators-packages.out | grep "{{ required_operator }}" | sed 's/"//g'| awk '{print $2}'
    register: filtering_result

    # The playbook will "breakout" if this condition is met (the operator does not exist in the index image)
  - name: verifing that the requested operators are in the list
    fail: 
      msg: "The operator does not exist in the index image packages list"
    when: filtering_result.stdout == ""

  - debug:
      msg: "the operator {{filtering_result.stdout}} has been found"

        #  - name: "verifing that old index images does not exist"
        #    shell: sudo podman images | grep "myregistry:5000/myindeximages"
        #    register: podman_images_verification

  - name: deleting any prexisting index images
    containers.podman.podman_image:
      name: myregistry:5000/myindeximages/certified-operator-index
      state: absent

  - name: Prunning the original index image and generate a new one
    shell: "sudo opm index prune -f registry.redhat.io/redhat/certified-operator-index:v4.6 -p {{ filtering_result.stdout }} -t myregistry:5000/myindeximages/certified-operator-index:v1"

  - name: Push new image to local registry
    containers.podman.podman_image:
      name: "certified-operator-index"
      push: yes
      auth_file: /run/containers/0/auth.json
      tag: v1
      push_args:
        dest: myregistry:5000/myindeximages/certified-operator-index:v1
      validate_certs: no

  - name: mirror the manifests of the required operators from the new, custom index image on myregistry
    shell: oc adm catalog mirror myregistry:5000/myindeximages/certified-operator-index:v1 myregistry.com:5000 -a /run/containers/0/auth.json --manifests-only --insecure

  - name: Run the index image
    containers.podman.podman_container:
      name: custom-certified-operators-index
      image: myregistry:5000/myindeximages/certified-operator-index:v1
      state: started
      ports:
        - 50052:50051

  - name: Run grpcurl to get the NEW list of packages (Operators) available
    shell: grpcurl -plaintext localhost:50052 api.Registry/ListPackages
    register: new_packages_list_output

  - debug:
      msg: "{{ new_packages_list_output.stdout }}"

  - name: verifing that the requested operators are in the packages list
    fail:
      msg: "The new packages list is empty"
    when: new_packages_list_output.stdout == ""
  
  - name: Delete the custom index container
    containers.podman.podman_container:
      name: custom-certified-operators-index
      image: myregistry:5000/myindeximages/certified-operator-index:v1
      state: absent

  - name: Edit the mapping.txt file
    shell: cat certified-operator-index-manifests/mapping.txt | awk -F'=' '{print $1}' | awk -F'com' '{print $2}' > my_mapping.txt

  - name: Generate the Skopeo commands for mirroring the operators required images to your local registry
    shell: cat my_mapping.txt | awk '{print "sudo skopeo copy --all --authfile=/run/containers/0/auth.json docker://registry.connect.redhat.com"$1" docker://myregistry:5000"$1 " --dest-tls-verify=false"}' > run.sh

  - name: Run the script with the skopeo commands
    shell: sudo bash run.sh

  - name: "Copy 'run.sh', 'my_mapping.txt', 'imageContentSourcePolicy.yaml' to '/tmp/myregistry/data' for later compressing all of it together"
    copy:
      src: "{{ item.src }}"
      dest: "{{item.dest}}"
    with_items:
      - {src: 'run.sh', dest: '/tmp/myregistry/data/run.sh'}
      - {src: 'my_mapping.txt', dest: '/tmp/myregistry/data/my_mapping.txt'}
      - {src: 'certified-operator-index-manifests/imageContentSourcePolicy.yaml', dest: '/tmp/myregistry/data/imageContentSourcePolicy.yaml'}

  - name: Compress directory /tmp/myregsitry/data
    community.general.archive:
      path: /tmp/myregistry/data
      dest: data.tar.gz
      format: gz
